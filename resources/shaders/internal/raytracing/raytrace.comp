#version 460 core
#extension GL_ARB_bindless_texture : enable

/* ------ consts ------ */
const float PI = 3.14159265359;
const float TWO_PI = PI*2;
const float SQRT_2 = 1.41421356237;

struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct Camera
{
	vec3 position;
	vec3 rayTL;
	vec3 rayTR;
	vec3 rayBL;
	vec3 rayBR;
};

struct Material
{
	layout(bindless_sampler) sampler2D albedo;
	layout(bindless_sampler) sampler2D normal;
	layout(bindless_sampler) sampler2D roughness;
	layout(bindless_sampler) sampler2D metalness;
	layout(bindless_sampler) sampler2D displacement;
	layout(bindless_sampler) sampler2D emissive;
};

struct HitInfo
{
	bool anyHit;
	float t;
	vec3 impact;
	vec3 normal;
	vec3 tangent;
	Material material;
	vec2 uv;
	int objectIndex;
};

struct MaterialData
{
	vec3  albedo;
	vec3  normal;
	float roughness;
	float metalness;
	float displacement;
	float emissive;
	vec3  F0;
};

struct Transform
{
	mat4 localToWorld;
	mat4 worldToLocal;
	mat4 localToWorldNormal;
};

struct Sphere
{
	Material material;
	Transform transform;
	int objectIndex;
	float padding0;
	float padding1;
	float padding2;
};

struct Plane
{
	Material material;
	Transform transform;
	bool infinite;
	int objectIndex;
	float padding0;
	float padding1;
};

struct DirectionalLight
{
	vec3 fragToLightDirection;
	float angularDiameter;
	vec3 color;
	float intensity;
};

struct PointLight
{
	vec3 position;
	float size;
	vec3 color;
	float intensity;
};

struct Mesh
{
	Material material;
	Transform transform;
	int objectIndex;
	int vertexOffset;
	int indexOffset;
	int indexCount;
};

struct Vertex
{
	float position_x;
	float position_y;
	float position_z;
	float u;
	float v;
	float normal_x;
	float normal_y;
	float normal_z;
	float tangent_x;
	float tangent_y;
	float tangent_z;
};

struct Skybox
{
	bool enabled;
	layout(bindless_sampler) samplerCube cubemap;
};

uniform Camera u_camera;
uniform Skybox u_skybox;

layout(std430, binding = 0) readonly buffer DirectionalLightBuffer
{
	DirectionalLight directionalLights[];
};

layout(std430, binding = 1) readonly buffer PointLightBuffer
{
	PointLight pointLights[];
};

layout(std430, binding = 2) readonly buffer SphereBuffer
{
	Sphere spheres[];
};

layout(std430, binding = 3) readonly buffer PlaneBuffer
{
	Plane planes[];
};

layout(std430, binding = 4) readonly buffer MeshBuffer
{
	Mesh meshes[];
};

layout(std430, binding = 5) readonly buffer MeshVertexBuffer
{
	Vertex meshVertices[];
};

layout(std430, binding = 6) readonly buffer MeshIndexBuffer
{
	uint meshIndices[];
};

layout (bindless_image) writeonly uniform image2D o_renderImage;
layout (bindless_image) writeonly uniform iimage2D o_objectIndexImage;

vec3 localToWorldDirection(Transform transform, vec3 direction);
vec3 worldToLocalDirection(Transform transform, vec3 direction);
vec3 localToWorldPosition(Transform transform, vec3 position);
vec3 worldToLocalPosition(Transform transform, vec3 position);
Ray localToWorldRay(Transform transform, Ray ray);
Ray worldToLocalRay(Transform transform, Ray ray);
vec3 localToWorldNormal(Transform transform, vec3 normal);

//vec3 background(vec3 dir);
vec3 sampleSkybox(vec3 dir);

HitInfo trace(Ray ray);

bool between(float min, float max, float v);

void intersectSphere(Ray ray, Sphere sphere, inout HitInfo hitInfo);
void intersectPlane(Ray ray, Plane plane, inout HitInfo hitInfo);
void intersectMesh(Ray ray, Mesh mesh, inout HitInfo hitInfo);

MaterialData getMaterialData(Material material, vec2 uv, vec3 surfaceNormal, vec3 surfaceTangent);

vec2 VogelDiskSample(int sampleIndex, int samplesCount, float phi);
float InterleavedGradientNoise(vec2 position_screen);

vec3 calculateLighting(vec3 radiance, vec3 viewDir, vec3 lightDir, MaterialData materialData);
vec3 calculateBRDF(vec3 viewDir, vec3 lightDir, MaterialData materialData);

float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
vec3 fresnelSchlick(float cosTheta, vec3 F0);

const int MULTISAMPLES = 1;

layout (local_size_x = 1, local_size_y = 1) in;
void main()
{
	vec2 pixelSize = 1.0 / vec2(gl_NumWorkGroups.xy);
	
	float PS_subPixelSize = 1.0 / MULTISAMPLES;
	float PS_halfSubPixelSize = PS_subPixelSize * 0.5;
	
	int objectIndex = -1;
	
	vec3 color = vec3(0);
	for (int y = 0; y < MULTISAMPLES; y++)
	{
		for (int x = 0; x < MULTISAMPLES; x++)
		{
			vec2 PS_rayPos = PS_subPixelSize * vec2(x, y) + PS_halfSubPixelSize;
			vec2 normalizedPixelCoord = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy) + PS_rayPos * pixelSize;
			
			vec3 interpolatedTopRayDir = mix(u_camera.rayTL, u_camera.rayTR, normalizedPixelCoord.x);
			vec3 interpolatedBottomRayDir = mix(u_camera.rayBL, u_camera.rayBR, normalizedPixelCoord.x);
			
			vec3 interpolatedRayDir = mix(interpolatedBottomRayDir, interpolatedTopRayDir, normalizedPixelCoord.y);
			
			Ray ray = Ray(u_camera.position, normalize(interpolatedRayDir));
			
			HitInfo hitInfo = trace(ray);
			
			if (hitInfo.anyHit)
			{
				objectIndex = hitInfo.objectIndex;
				
				MaterialData materialData = getMaterialData(hitInfo.material, hitInfo.uv, hitInfo.normal, hitInfo.tangent);
				
				color += materialData.albedo * materialData.emissive;
				
				for (int i = 0; i < directionalLights.length(); i++)
				{
					DirectionalLight light = directionalLights[i];
					
					//			float shadow = light.castShadows ? isInDirectionalShadow(i) : 0;
					float shadow = 0;
					
					vec3 lightDir    = light.fragToLightDirection;
					vec3 radiance    = light.color * light.intensity;
					
					color += calculateLighting(radiance, -ray.direction, lightDir, materialData) * (1 - shadow);
				}
				
				for (int i = 0; i < pointLights.length(); i++)
				{
					PointLight light = pointLights[i];
					
					//			float shadow = light.castShadows ? isInPointShadow(i) : 0;
					float shadow = 0;
					
					vec3  fragToLight = light.position - hitInfo.impact;
					float distance    = length(fragToLight);
					vec3  lightDir    = fragToLight / distance;
					float attenuation = 1.0 / (1 + distance * distance);
					vec3  radiance    = light.color * light.intensity * attenuation;
					
					color += calculateLighting(radiance, -ray.direction, lightDir, materialData) * (1 - shadow);
				}

				if (u_skybox.enabled)
				{
					float shadow = 0;

					vec3 viewDir = -ray.direction;
					vec3 lightDir = reflect(ray.direction, materialData.normal);
					vec3 radiance = sampleSkybox(lightDir);

					vec3 halfwayDir  = normalize(viewDir + lightDir);

					vec3  F = fresnelSchlick(max(dot(halfwayDir, viewDir), 0.0), materialData.F0);

					color += radiance * F * (1.0 - materialData.roughness);
				}
			}
			else if (u_skybox.enabled)
			{
				color += sampleSkybox(ray.direction);
			}
		}
	}
	
	color /= MULTISAMPLES * MULTISAMPLES;
	
	imageStore(o_renderImage, ivec2(gl_GlobalInvocationID), vec4(color, 1));
	imageStore(o_objectIndexImage, ivec2(gl_GlobalInvocationID), ivec4(objectIndex, 0, 0, 0));
}

vec3 localToWorldDirection(Transform transform, vec3 direction)
{
	return normalize((transform.localToWorld * vec4(direction, 0)).xyz);
}

vec3 worldToLocalDirection(Transform transform, vec3 direction)
{
	return normalize((transform.worldToLocal * vec4(direction, 0)).xyz);
}

vec3 localToWorldPosition(Transform transform, vec3 position)
{
	return (transform.localToWorld * vec4(position, 1)).xyz;
}

vec3 worldToLocalPosition(Transform transform, vec3 position)
{
	return (transform.worldToLocal * vec4(position, 1)).xyz;
}

Ray localToWorldRay(Transform transform, Ray ray)
{
	return Ray
	(
		localToWorldPosition(transform, ray.origin),
		localToWorldDirection(transform, ray.direction)
	);
}

Ray worldToLocalRay(Transform transform, Ray ray)
{
	return Ray
	(
		worldToLocalPosition(transform, ray.origin),
		worldToLocalDirection(transform, ray.direction)
	);
}

vec3 localToWorldNormal(Transform transform, vec3 normal)
{
	return normalize((transform.localToWorldNormal * vec4(normal, 0)).xyz);
}

vec3 srgbToLinear(vec3 color)
{
	bvec3 cutoff = lessThan(color, vec3(0.04045));
	vec3 higher = pow((color + vec3(0.055))/vec3(1.055), vec3(2.4));
	vec3 lower = color/vec3(12.92);
	
	return mix(higher, lower, cutoff);
}

//vec3 background(vec3 dir)
//{
//	const vec3 sky = vec3(0.21763764, 0.45626346, 1.0);
//	const vec3 ground = vec3(1.0, 1.0, 1.0);
//
//	float t = dir.y * 0.5 + 0.5;
//	return srgbToLinear(mix(ground, sky, t));
//}

vec3 sampleSkybox(vec3 dir)
{
	return texture(u_skybox.cubemap, dir * vec3(-1, -1, 1)).rgb;
}

HitInfo trace(Ray ray)
{
	HitInfo hitInfo;
	hitInfo.anyHit = false;
	
	for (int i = 0; i < spheres.length(); i++)
	{
		intersectSphere(ray, spheres[i], hitInfo);
	}
	
	for (int i = 0; i < planes.length(); i++)
	{
		intersectPlane(ray, planes[i], hitInfo);
	}
	
	for (int i = 0; i < meshes.length(); i++)
	{
		intersectMesh(ray, meshes[i], hitInfo);
	}
	
	return hitInfo;
}

bool between(float min, float max, float v)
{
	return v >= min && v <= max;
}

void intersectSphere(Ray ray, Sphere sphere, inout HitInfo hitInfo)
{
	Ray localRay = worldToLocalRay(sphere.transform, ray);
	
	vec3 origin = localRay.origin;
	vec3 direction = localRay.direction;
	
	float a = dot(direction, direction);
	float b = 2 * dot(direction, origin);
	float c = dot(origin, origin) - 1;
	
	float discriminant = b*b - 4*a*c;
	
	if (discriminant < 0)
	{
		return;
	}
	
	float t;
	
	if (discriminant == 0)
	{
		t = (-b)/(2*a);
	}
	else //if (discriminant > 0)
	{
		float t0 = (-b - sqrt(discriminant)) / (2*a);
		float t1 = (-b + sqrt(discriminant)) / (2*a);
		
		if (t0 > 0 && t0 < t1)
		{
			t = t0;
		}
		else //if (t1 > 0 && t1 < t0)
		{
			t = t1;
		}
	}
	
	if (t > 0)
	{
		vec3 localImpact = origin + direction * t;
		vec3 worldImpact = localToWorldPosition(sphere.transform, localImpact);
		t = distance(ray.origin, worldImpact); // fix t scaling
		
		if (!hitInfo.anyHit || t < hitInfo.t)
		{
			hitInfo.t = t;
			hitInfo.anyHit = true;
			hitInfo.impact = worldImpact;
			
			float phi = atan(localImpact.z, localImpact.x);
			float theta = asin(localImpact.y);
			hitInfo.uv.x = 1 - (phi + PI) / (2 * PI);
			hitInfo.uv.y = (theta + PI / 2) / PI;
			
			vec3 potentialNormal = localToWorldNormal(sphere.transform, localImpact);
			bool flipNormals = dot(potentialNormal, -ray.direction) < 0;
			hitInfo.normal = flipNormals ? -potentialNormal : potentialNormal;
			
			vec3 potentialTangent = localToWorldNormal(sphere.transform, -vec3(-sin(phi), 0, cos(phi)));
			hitInfo.tangent = flipNormals ? -potentialTangent : potentialTangent;
			
			hitInfo.material = sphere.material;
			
			hitInfo.objectIndex = sphere.objectIndex;
		}
	}
	
	return;
}

void intersectPlane(Ray ray, Plane plane, inout HitInfo hitInfo)
{
	Ray localRay = worldToLocalRay(plane.transform, ray);
	
	vec3 origin = localRay.origin;
	vec3 direction = localRay.direction;
	
	float t = -(origin.y/direction.y);
	
	if (t > 0)
	{
		vec3 localImpact = origin + direction * t;
		
		if (!plane.infinite && (!between(-1, 1, localImpact.x) || !between(-1, 1, localImpact.z)))
		{
			return;
		}
		
		vec3 worldImpact = localToWorldPosition(plane.transform, localImpact);
		t = distance(ray.origin, worldImpact); // fix t scaling
		
		if (!hitInfo.anyHit || t < hitInfo.t)
		{
			hitInfo.t = t;
			hitInfo.anyHit = true;
			hitInfo.impact = localToWorldPosition(plane.transform, localImpact);
			
			vec3 potentialNormal = localToWorldNormal(plane.transform, vec3(0, 1, 0));
			bool flipNormals = dot(potentialNormal, -ray.direction) < 0;
			hitInfo.normal = flipNormals ? -potentialNormal : potentialNormal;
			
			vec3 potentialTangent = localToWorldNormal(plane.transform, vec3(1, 0, 0));
			hitInfo.tangent = flipNormals ? -potentialTangent : potentialTangent;
			
			hitInfo.material = plane.material;
			hitInfo.uv = vec2(localImpact.x, localImpact.z) * 0.5 + 0.5;
			
			hitInfo.objectIndex = plane.objectIndex;
		}
	}
}

void intersectMesh(Ray ray, Mesh mesh, inout HitInfo hitInfo)
{
	Ray localRay = worldToLocalRay(mesh.transform, ray);
	
	vec3 origin = localRay.origin;
	vec3 direction = localRay.direction;
	
	for (int i = 0; i < mesh.indexCount; i += 3)
	{
		Vertex vertex0 = meshVertices[mesh.vertexOffset + meshIndices[mesh.indexOffset + i + 0]];
		Vertex vertex1 = meshVertices[mesh.vertexOffset + meshIndices[mesh.indexOffset + i + 1]];
		Vertex vertex2 = meshVertices[mesh.vertexOffset + meshIndices[mesh.indexOffset + i + 2]];
		
		vec3 v0 = vec3(vertex0.position_x, vertex0.position_y, vertex0.position_z);
		vec3 v1 = vec3(vertex1.position_x, vertex1.position_y, vertex1.position_z);
		vec3 v2 = vec3(vertex2.position_x, vertex2.position_y, vertex2.position_z);
		
		vec3 v0v1 = v1 - v0;
		vec3 v0v2 = v2 - v0;
		vec3 pvec = cross(direction, v0v2);
		float det = dot(v0v1, pvec);
		
		// if the determinant is negative the triangle is backfacing
		// ray and triangle are parallel if det is close to 0
		if (abs(det) == 0) continue;
		
		float invDet = 1 / det;
		
		vec3 tvec = origin - v0;
		float u = dot(tvec, pvec) * invDet;
		if (u < 0 || u > 1) continue;
		
		vec3 qvec = cross(tvec, v0v1);
		float v = dot(direction, qvec) * invDet;
		if (v < 0 || u + v > 1) continue;
		
		float t = dot(v0v2, qvec) * invDet;
		
		if (t > 0)
		{
			vec3 localImpact = origin + direction * t;
			vec3 worldImpact = localToWorldPosition(mesh.transform, localImpact);
			t = distance(ray.origin, worldImpact); // fix t scaling
			
			if (!hitInfo.anyHit || t < hitInfo.t)
			{
				hitInfo.t = t;
				hitInfo.anyHit = true;
				hitInfo.impact = localToWorldPosition(mesh.transform, localImpact);
				
				vec3 triangleNormal = normalize(cross(v0v1, v0v2));
				bool flipNormals = dot(triangleNormal, -localRay.direction) < 0;
				
				vec3 potentialNormal = vec3(vertex0.normal_x, vertex0.normal_y, vertex0.normal_z) * (1 - u - v) +
									   vec3(vertex1.normal_x, vertex1.normal_y, vertex1.normal_z) * u +
									   vec3(vertex2.normal_x, vertex2.normal_y, vertex2.normal_z) * v;
				potentialNormal = normalize(localToWorldNormal(mesh.transform, potentialNormal));
				hitInfo.normal = flipNormals ? -potentialNormal : potentialNormal;
				
				vec3 potentialTangent = vec3(vertex0.tangent_x, vertex0.tangent_y, vertex0.tangent_z) * (1 - u - v) +
										vec3(vertex1.tangent_x, vertex1.tangent_y, vertex1.tangent_z) * u +
										vec3(vertex2.tangent_x, vertex2.tangent_y, vertex2.tangent_z) * v;
				potentialTangent = normalize(localToWorldNormal(mesh.transform, potentialTangent));
				hitInfo.tangent = flipNormals ? -potentialTangent : potentialTangent;
				
				hitInfo.material = mesh.material;
				
				hitInfo.uv = vec2(vertex0.u, vertex0.v) * (1 - u - v) +
							 vec2(vertex1.u, vertex1.v) * u +
							 vec2(vertex2.u, vertex2.v) * v;
				
				hitInfo.objectIndex = mesh.objectIndex;
			}
		}
	}
}

MaterialData getMaterialData(Material material, vec2 uv, vec3 surfaceNormal, vec3 surfaceTangent)
{
	MaterialData materialData;
	
	vec3 surfaceBitangent = cross(surfaceNormal, surfaceTangent);
	mat3 tangentToWorld = mat3(surfaceTangent, surfaceBitangent, surfaceNormal);
	
	materialData.normal.xy = texture(material.normal, uv).rg * 2.0 - 1.0;
	materialData.normal.z  = sqrt(1 - min(dot(materialData.normal.xy, materialData.normal.xy), 1));
	materialData.normal    = normalize(tangentToWorld * materialData.normal);
	
	materialData.albedo = texture(material.albedo, uv).rgb;
	materialData.roughness = texture(material.roughness, uv).r;
	materialData.metalness = texture(material.metalness, uv).r;
	materialData.displacement = texture(material.displacement, uv).r;
	materialData.emissive = texture(material.emissive, uv).r;
	materialData.F0 = mix(vec3(0.04), materialData.albedo, materialData.metalness);
	
	return materialData;
}

// Based on the code at https://www.gamedev.net/tutorials/programming/graphics/contact-hardening-soft-shadows-made-fast-r4906/
vec2 VogelDiskSample(int sampleIndex, int samplesCount, float phi)
{
	float GoldenAngle = 2.4;
	
	float r = sqrt(sampleIndex + 0.5) / sqrt(samplesCount);
	float theta = sampleIndex * GoldenAngle + phi;
	
	float sine = sin(theta);
	float cosine = cos(theta);
	
	return vec2(r * cosine, r * sine);
}

float InterleavedGradientNoise(vec2 position_screen)
{
	vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
	return fract(magic.z * fract(dot(position_screen, magic.xy)));
}

vec3 calculateLighting(vec3 radiance, vec3 viewDir, vec3 lightDir, MaterialData materialData)
{
	vec3 brdf = calculateBRDF(viewDir, lightDir, materialData);
	
	return brdf * radiance * max(dot(materialData.normal, lightDir), 0.0);
}

// Cook-Torrance
vec3 calculateBRDF(vec3 viewDir, vec3 lightDir, MaterialData materialData)
{
	vec3 halfwayDir  = normalize(viewDir + lightDir);
	
	// ---------- Specular part ----------
	
	float D = DistributionGGX(materialData.normal, halfwayDir, materialData.roughness);
	vec3  F = fresnelSchlick(max(dot(halfwayDir, viewDir), 0.0), materialData.F0);
	float G = GeometrySmith(materialData.normal, viewDir, lightDir, materialData.roughness);
	
	vec3  numerator   = D * F * G;
	float denominator = 4.0 * max(dot(materialData.normal, viewDir), 0.0) * max(dot(materialData.normal, lightDir), 0.0);
	vec3  specular    = numerator / max(denominator, 0.001);
	
	vec3 specularWeight = F;
	
	// ---------- Diffuse part ----------
	
	vec3 diffuse = materialData.albedo / PI;
	
	vec3 diffuseWeight = vec3(1.0) - specularWeight;
	diffuseWeight *= 1.0 - materialData.metalness; // Metals have no diffuse
	
	// ---------- Final result ----------
	
	// specularWeight already integrated to specular
	return (diffuseWeight * diffuse) + (specular);
}

// Normal Distribution Function
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a      = roughness*roughness;
	float a2     = a*a;
	float NdotH  = max(dot(N, H), 0.0);
	float NdotH2 = NdotH*NdotH;
	
	float num   = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	
	return num / max(denom, 0.0000001);
}

// Geometry Shadowing Function
float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	
	float num   = NdotV;
	float denom = NdotV * (1.0 - k) + k;
	
	return num / max(denom, 0.0000001);
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2  = GeometrySchlickGGX(NdotV, roughness);
	float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
	return ggx1 * ggx2;
}

// Fresnel Function
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
