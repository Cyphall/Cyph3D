#version 460 core
#extension GL_EXT_shader_image_load_formatted : require

layout(set = 0, binding = 0) uniform readonly image2D u_input;
layout(set = 0, binding = 1) uniform writeonly image2D u_output;

layout(push_constant) uniform constants
{
	bool u_srgb;
	uint u_reduceMode;
};

vec4 toSrgb(vec4 linear)
{
	bvec3 cutoff = lessThan(linear.rgb, vec3(0.0031308));
	vec3 higher = vec3(1.055) * pow(linear.rgb, vec3(1.0/2.4)) - vec3(0.055);
	vec3 lower = linear.rgb * vec3(12.92);
	
	return vec4(mix(higher, lower, cutoff), linear.a);
}

vec4 toLinear(vec4 srgb)
{
	bvec3 cutoff = lessThan(srgb.rgb, vec3(0.04045));
	vec3 higher = pow((srgb.rgb + vec3(0.055)) / vec3(1.055), vec3(2.4));
	vec3 lower = srgb.rgb/vec3(12.92);
	
	return vec4(mix(higher, lower, cutoff), srgb.a);
}

vec4 load(readonly image2D image, uvec2 pos)
{
	vec4 value = imageLoad(image, ivec2(pos));
	
	if (u_srgb)
	{
		value = toLinear(value);
	}
	
	return value;
}

vec4 reduce(vec4 a, vec4 b, vec4 c, vec4 d)
{
	switch (u_reduceMode)
	{
	case 0:
		return (a + b + c + d) * 0.25;
	case 1:
		return max(max(a, b), max(c, d));
	case 2:
		return min(min(a, b), min(c, d));
	}
	
	return vec4(0);
}

void store(writeonly image2D image, uvec2 pos, vec4 value)
{
	if (u_srgb)
	{
		value = toSrgb(value);
	}
	
	imageStore(image, ivec2(pos), value);
}

layout (local_size_x = 32) in;
void main()
{
	uvec2 dstSize = imageSize(u_output);
	uvec2 dstPos = uvec2(gl_GlobalInvocationID.x % dstSize.x, gl_GlobalInvocationID.x / dstSize.x);
	
	if (any(greaterThanEqual(dstPos, dstSize)))
	{
		return;
	}
	
	vec4 a = load(u_input, dstPos * 2 + uvec2(0, 0));
	vec4 b = load(u_input, dstPos * 2 + uvec2(0, 1));
	vec4 c = load(u_input, dstPos * 2 + uvec2(1, 0));
	vec4 d = load(u_input, dstPos * 2 + uvec2(1, 1));
	
	vec4 result = reduce(a, b, c, d);
	
	store(u_output, dstPos, result);
}