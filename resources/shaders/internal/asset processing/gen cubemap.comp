#version 460 core
#extension GL_EXT_shader_image_load_formatted : require

const float PI = 3.14159265359;

layout(set = 0, binding = 0) uniform sampler2D u_equirectangularTexture;
layout(set = 0, binding = 1) uniform writeonly image2D u_cubemapTexture;

layout(push_constant) uniform constants
{
	mat4 u_viewProjectionInv;
};

vec3 sampleColor(vec2 cubemapUV)
{
	vec4 direction4D = u_viewProjectionInv * vec4(cubemapUV * 2.0 - 1.0, 0.5, 1.0);
	vec3 direction = normalize(direction4D.xyz / direction4D.w);
	
	vec2 sphericalCoords = vec2(
		atan(direction.x, -direction.z) + PI,
		acos(direction.y)
	);
	
	vec2 equirectangularUV = vec2(
		sphericalCoords.x / (PI * 2.0),
		sphericalCoords.y / PI
	);
	
	return textureLod(u_equirectangularTexture, equirectangularUV, 0).xyz;
}

layout (local_size_x = 8, local_size_y = 8) in;
void main()
{
	uvec2 dstSize = imageSize(u_cubemapTexture);
	uvec2 dstPos = gl_GlobalInvocationID.xy;
	
	if (any(greaterThanEqual(dstPos, dstSize)))
	{
		return;
	}
	
	vec3 color = vec3(0);
	
	color += sampleColor((dstPos + vec2(0.25, 0.25)) / dstSize);
	color += sampleColor((dstPos + vec2(0.75, 0.25)) / dstSize);
	color += sampleColor((dstPos + vec2(0.25, 0.75)) / dstSize);
	color += sampleColor((dstPos + vec2(0.75, 0.75)) / dstSize);
	
	color *= 0.25;
	
	imageStore(u_cubemapTexture, ivec2(dstPos), vec4(color, 1.0));
}