#version 460 core

#extension GL_EXT_shader_image_int64 : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_gpu_shader_fp64 : require
#extension GL_GOOGLE_include_directive : require

#include "../../common/64bit.glsl"

layout(set = 0, binding = 0, r64ui) uniform readonly u64image2D u_input[3];
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D u_output;

layout(push_constant) uniform constants
{
	uint u_accumulatedSamples;
};

layout (local_size_x = 8, local_size_y = 8) in;
void main()
{
	uvec2 dstSize = imageSize(u_output);
	uvec2 dstPos = gl_GlobalInvocationID.xy;

	if (any(greaterThanEqual(dstPos, dstSize)))
	{
		return;
	}

	u64vec3 lightEncoded = u64vec3(
		imageLoad(u_input[0], ivec2(dstPos)).r,
		imageLoad(u_input[1], ivec2(dstPos)).r,
		imageLoad(u_input[2], ivec2(dstPos)).r
	);

	dvec3 light = uint64BitsToDouble(lightEncoded);

	vec3 color = vec3(light / u_accumulatedSamples);

	imageStore(u_output, ivec2(dstPos), vec4(color, 1));
}